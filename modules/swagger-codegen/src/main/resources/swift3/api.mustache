{{#operations}}//
// {{classname}}.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import WWFoundation

{{#swiftUseApiNamespace}}
extension {{projectName}}API {
{{/swiftUseApiNamespace}}

open class {{classname}} {

{{#operation}}
    open class func {{operationId}}(urlParameters: String? = "", bodyParameters: [String: AnyObject]?, service: HTTP, headers: [String: String]?, completion: @escaping ((_ {{#returnType}}data: {{{returnType}}}?,_ {{/returnType}}error: Error?) -> Void)) {
        {{operationId}}WithRequestBuilder(urlParameters: (urlParameters ?? ""), bodyParameters: bodyParameters, service: service, headers: headers).execute { (object, error) -> Void in
            if let objectDictionary = object as? [String: AnyObject], let object = {{#returnType}}{{{returnType}}}{{/returnType}}(dictionary: objectDictionary) {
                completion(object, nil)
            } else {
                completion(nil, error)
            }
        }
    }

    fileprivate class func {{operationId}}WithRequestBuilder(urlParameters: String, bodyParameters: [String: AnyObject]?, service: HTTP, headers: [String: String]? = [:]) -> RequestBuilder {
        {{^pathParams}}let{{/pathParams}}{{#pathParams}}{{^secondaryParam}}var{{/secondaryParam}}{{/pathParams}} path = "{{path}}"{{#pathParams}}
        path = path.replacingOccurrences(of: "{{=<% %>=}}{<%paramName%>}<%={{ }}=%>", with: "\({{paramName}}{{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}.rawValue{{/isContainer}}{{/isEnum}})", options: .literal, range: nil){{/pathParams}}
        let URLString = path + urlParameters        
        return HTTPRequestBuilder(method: RequestBuilder.RequestMethod(rawValue: "{{httpMethod}}")!, URLString: URLString,service: service, parameters: bodyParameters, isBody: {{hasBodyParam}}, headers: headers)
    }

{{/operation}}
}
{{#swiftUseApiNamespace}}
}
{{/swiftUseApiNamespace}}
{{/operations}}
