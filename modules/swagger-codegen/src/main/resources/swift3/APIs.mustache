// APIs.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import WWFoundation

open class RequestBuilder {
    var credential: URLCredential?
    var headers: [String: String] = [:]
    let parameters: [String: AnyObject]?
    let isBody: Bool
    let method: RequestMethod
    let URLString: String
    let service: HTTP

    public enum RequestMethod: String {
        case get = "GET"
        case post = "POST"
        case put = "PUT"
        case delete = "DELETE"
        case patch = "PATCH"
    }

    required public init(method: RequestMethod, URLString: String, service: HTTP, parameters: [String: AnyObject]?, isBody: Bool, headers: [String: String]?) {
        self.method = method
        self.URLString = URLString
        self.parameters = parameters
        self.isBody = isBody
        self.headers = headers ?? [:]
        self.service = service
    }
    
    open func execute(_ completion: @escaping (_ response: AnyObject?, _ error: Error?) -> Void) { }
}

open class HTTPRequestBuilder: RequestBuilder {
    
    required public init(method: RequestMethod, URLString: String, service: HTTP, parameters: [String : AnyObject]?, isBody: Bool, headers: [String : String]?) {
        super.init(method: method, URLString: URLString, service: service, parameters: parameters, isBody: isBody, headers: headers)
    }
    
    override open func execute(_ completion: @escaping (_ response: AnyObject?, _ error: Error?) -> Void) {
        switch self.method {
        case .get:
            self.getRequest(completion: completion)
        case .post:
            self.postRequest(completion: completion)
        case .put:
            self.putRequest(completion: completion)
        case .patch:
            self.patchRequest(completion: completion)
        case .delete:
            self.deleteRequest(completion: completion)
        }
    }
    
    fileprivate func getRequest(completion: @escaping (_ response: AnyObject?, _ error: Error?) -> Void) {
        self.service.get(path: self.URLString, parameters: self.parameters as [String : AnyObject]?, encoding: .json, headers: self.headers, responseType: HTTPConnection.ResponseType.responseJSON, useCache: false) { (request, response, object, error) in
            completion(object, error)
        }
    }
    
    fileprivate func postRequest(completion: @escaping (_ response: AnyObject?, _ error: Error?) -> Void) {
        self.service.post(path: self.URLString, parameters: self.parameters as [String : AnyObject]?, encoding: .json, headers: self.headers, responseType: HTTPConnection.ResponseType.responseJSON, useCache: false) { (request, response, object, error) in
            completion(object, error)
        }
    }
    
    fileprivate func putRequest(completion: @escaping (_ response: AnyObject?, _ error: Error?) -> Void) {
        self.service.put(path: self.URLString, parameters: self.parameters as [String : AnyObject]?, encoding: .json, headers: self.headers, responseType: HTTPConnection.ResponseType.responseJSON, useCache: false) { (request, response, object, error) in
            completion(object, error)
        }
    }
    
    
    fileprivate func patchRequest(completion: @escaping (_ response: AnyObject?, _ error: Error?) -> Void) {
        self.service.patch(path: self.URLString, parameters: self.parameters as [String : AnyObject]?, encoding: .json, headers: self.headers, responseType: HTTPConnection.ResponseType.responseJSON, useCache: false) { (request, response, object, error) in
            completion(object, error)
        }
    }
    
    fileprivate func deleteRequest(completion: @escaping (_ response: AnyObject?, _ error: Error?) -> Void) {
        self.service.delete(path: self.URLString, parameters: self.parameters as [String : AnyObject]?, encoding: .json, headers: self.headers, responseType: HTTPConnection.ResponseType.responseJSON, useCache: false) { (request, response, object, error) in
            completion(object, error)
        }
    }
}
