// SwaggerMockModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

public class SwaggerMockModel {

    private class func converStringToJSONObject(_ jsonString: String) -> AnyObject? {
        let data: Data = jsonString.data(using: String.Encoding.utf8)!
        do {
            return try  JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments) as AnyObject
            
        } catch _ {
            return nil
        }
    }

//------------------------------------------------------------------------------------------------------------------
    // MARK: - Objects
//------------------------------------------------------------------------------------------------------------------
{{#models}}{{#model}}
	public class func mock{{classname}}JsonObject() -> AnyObject? {
		return converStringToJSONObject(mock{{classname}}JsonString())
	}

	{{#hasRequired}}
	public class func mock{{classname}}BadJsonObject() -> AnyObject? {
		return converStringToJSONObject(mock{{classname}}BadJsonString())
	}
	{{/hasRequired}}
{{/model}}{{/models}}
//------------------------------------------------------------------------------------------------------------------
    // MARK: - Strings
//------------------------------------------------------------------------------------------------------------------

	private class func dateMockString() -> String {
	    return "\"2016-04-07T04:00:00Z\""
	}
{{#models}}{{#model}}
	private class func mock{{classname}}JsonString() -> String {
		return "{ {{#requiredVars}}{{^-first}}, {{/-first}}\"{{baseName}}\": {{#isString}}\"sample string\"{{/isString}}{{#isInteger}}1{{/isInteger}}{{#isLong}}3.5{{/isLong}}{{#isFloat}}4.675{{/isFloat}}{{#isDouble}}1.0{{/isDouble}}{{#isBoolean}}true{{/isBoolean}}{{#isDate}}\(dateMockString()){{/isDate}}{{#isDateTime}}\(dateMockString()){{/isDateTime}}{{#isNotContainer}}{{^isPrimitiveType}}{{#complexType}}{{^isDate}}{{^isDateTime}}\(mock{{complexType}}JsonString()){{/isDateTime}}{{/isDate}}{{/complexType}}{{/isPrimitiveType}}{{/isNotContainer}}{{#isContainer}}{{#isListContainer}}[\(mock{{complexType}}JsonString()),\(mock{{complexType}}JsonString()),\(mock{{complexType}}JsonString()), \(mock{{complexType}}JsonString())]{{/isListContainer}}{{#isMapContainer}}{"key": "value"}{{/isMapContainer}}{{/isContainer}}{{/requiredVars}} }"
	}
	{{#hasRequired}}

	private class func mock{{classname}}BadJsonString() -> String {
		return "{ {{#requiredVars}}{{^-first}}\"{{baseName}}\": {{#isString}}\"sample string\"{{/isString}}{{#isInteger}}1{{/isInteger}}{{#isLong}}3.5{{/isLong}}{{#isFloat}}4.675{{/isFloat}}{{#isDouble}}1.0{{/isDouble}}{{#isBoolean}}true{{/isBoolean}}{{#isDate}}\(dateMockString()){{/isDate}}{{#isDateTime}}\(dateMockString()){{/isDateTime}}{{#isNotContainer}}{{^isPrimitiveType}}{{#complexType}}{{^isDate}}{{^isDateTime}}\(mock{{complexType}}JsonString()){{/isDateTime}}{{/isDate}}{{/complexType}}{{/isPrimitiveType}}{{/isNotContainer}}{{#isContainer}}{{#isListContainer}}[\(mock{{complexType}}JsonString()),\(mock{{complexType}}JsonString()),\(mock{{complexType}}JsonString()), \(mock{{complexType}}JsonString())]{{/isListContainer}}{{#isMapContainer}}{"key": "value"}{{/isMapContainer}}{{/isContainer}}{{/-first}}{{^-last}}{{^-first}}, {{/-first}}{{/-last}}{{/requiredVars}} }"
	}{{/hasRequired}}
{{/model}}{{/models}}
}